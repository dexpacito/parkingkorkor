"use strict";
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapUserFunction = void 0;
// eslint-disable-next-line node/no-deprecated-api
const domain = require("domain");
const logger_1 = require("./logger");
const invoker_1 = require("./invoker");
const cloud_events_1 = require("./cloud_events");
/**
 * Get a completion handler that can be used to signal completion of an event function.
 * @param res the response object of the request the completion handler is for.
 * @returns an OnDoneCallback for the provided request.
 */
const getOnDoneCallback = (res) => {
    return process.domain.bind((err, result) => {
        if (res.locals.functionExecutionFinished) {
            console.log('Ignoring extra callback call');
        }
        else {
            res.locals.functionExecutionFinished = true;
            (0, invoker_1.sendResponse)(result, err, res);
        }
    });
};
/**
 * Helper function to parse a CloudEvent object from an HTTP request.
 * @param req an Express HTTP request
 * @returns a CloudEvent parsed from the request
 */
const parseCloudEventRequest = (req) => {
    let cloudEvent = req.body;
    if ((0, cloud_events_1.isBinaryCloudEvent)(req)) {
        cloudEvent = (0, cloud_events_1.getBinaryCloudEventContext)(req);
        cloudEvent.data = req.body;
    }
    // Populate the traceparent header.
    if (req.header('traceparent')) {
        cloudEvent.traceparent = req.header('traceparent');
    }
    return cloudEvent;
};
/**
 * Helper function to background event context and data payload object from an HTTP
 * request.
 * @param req an Express HTTP request
 * @returns the data playload and event context parsed from the request
 */
const parseBackgroundEvent = (req) => {
    const event = req.body;
    const data = event.data;
    let context = event.context;
    if (context === undefined) {
        // Support legacy events and CloudEvents in structured content mode, with
        // context properties represented as event top-level properties.
        // Context is everything but data.
        context = event;
        // Clear the property before removing field so the data object
        // is not deleted.
        context.data = undefined;
        delete context.data;
    }
    return { data, context };
};
/**
 * Wraps the provided function into an Express handler function with additional
 * instrumentation logic.
 * @param execute Runs user's function.
 * @return An Express handler function.
 */
const wrapHttpFunction = (execute) => {
    return (req, res) => {
        const d = domain.create();
        // Catch unhandled errors originating from this request.
        d.on('error', err => {
            if (res.locals.functionExecutionFinished) {
                console.error(`Exception from a finished function: ${err}`);
            }
            else {
                res.locals.functionExecutionFinished = true;
                (0, logger_1.sendCrashResponse)({ err, res });
            }
        });
        d.run(() => {
            process.nextTick(() => {
                execute(req, res);
            });
        });
    };
};
/**
 * Wraps an async CloudEvent function in an express RequestHandler.
 * @param userFunction User's function.
 * @return An Express hander function that invokes the user function.
 */
const wrapCloudEventFunction = (userFunction) => {
    const httpHandler = (req, res) => {
        const callback = getOnDoneCallback(res);
        const cloudEvent = parseCloudEventRequest(req);
        Promise.resolve()
            .then(() => userFunction(cloudEvent))
            .then(result => callback(null, result), err => callback(err, undefined));
    };
    return wrapHttpFunction(httpHandler);
};
/**
 * Wraps callback style CloudEvent function in an express RequestHandler.
 * @param userFunction User's function.
 * @return An Express hander function that invokes the user function.
 */
const wrapCloudEventFunctionWithCallback = (userFunction) => {
    const httpHandler = (req, res) => {
        const callback = getOnDoneCallback(res);
        const cloudEvent = parseCloudEventRequest(req);
        return userFunction(cloudEvent, callback);
    };
    return wrapHttpFunction(httpHandler);
};
/**
 * Wraps an async event function in an express RequestHandler.
 * @param userFunction User's function.
 * @return An Express hander function that invokes the user function.
 */
const wrapEventFunction = (userFunction) => {
    const httpHandler = (req, res) => {
        const callback = getOnDoneCallback(res);
        const { data, context } = parseBackgroundEvent(req);
        Promise.resolve()
            .then(() => userFunction(data, context))
            .then(result => callback(null, result), err => callback(err, undefined));
    };
    return wrapHttpFunction(httpHandler);
};
/**
 * Wraps an callback style event function in an express RequestHandler.
 * @param userFunction User's function.
 * @return An Express hander function that invokes the user function.
 */
const wrapEventFunctionWithCallback = (userFunction) => {
    const httpHandler = (req, res) => {
        const callback = getOnDoneCallback(res);
        const { data, context } = parseBackgroundEvent(req);
        return userFunction(data, context, callback);
    };
    return wrapHttpFunction(httpHandler);
};
/**
 * Wraps a user function with the provided signature type in an express
 * RequestHandler.
 * @param userFunction User's function.
 * @return An Express hander function that invokes the user function.
 */
const wrapUserFunction = (userFunction, signatureType) => {
    switch (signatureType) {
        case 'http':
            return wrapHttpFunction(userFunction);
        case 'event':
            // Callback style if user function has more than 2 arguments.
            if (userFunction.length > 2) {
                return wrapEventFunctionWithCallback(userFunction);
            }
            return wrapEventFunction(userFunction);
        case 'cloudevent':
            if (userFunction.length > 1) {
                // Callback style if user function has more than 1 argument.
                return wrapCloudEventFunctionWithCallback(userFunction);
            }
            return wrapCloudEventFunction(userFunction);
    }
};
exports.wrapUserFunction = wrapUserFunction;
//# sourceMappingURL=function_wrappers.js.map